# Autogenerated from python.template file

from quixstreams import Application
from quixstreams.models import TopicConfig
import seaborn as sns

from river import metrics, preprocessing
from river import linear_model
import matplotlib.pyplot as plt
from river import ensemble
from river import optim
from sklearn.metrics import confusion_matrix
from river import compose
from river import preprocessing

import dill


# Define an application that will connect to Kafka
app = Application(
    broker_address="localhost:39092",  # Kafka broker address
    auto_offset_reset="earliest",
    consumer_group="ALMA",
)

# Define the Kafka topics
input_topic = app.topic("phising", value_deserializer="json")

# Create a Streaming DataFrame connected to the input Kafka topic
sdf = app.dataframe(topic=input_topic)


# Define preprocessing

preprocessor_0 = preprocessing.StandardScaler()

# Define River Model
model = (
    (

        preprocessor_0) |
    linear_model.ALMAClassifier(


    )
)


# Define new features


# Drop features


# Define metrics
metric = metrics.MAE()

MAE = []


# Variables for plotting
y_true = []
y_pred = []


# Function for training the model
def train_and_predict(event):

    #    X = {
    #
    #
    #    }

    X = {key: value for key, value in event.items() if key != "is_phishing"}

    y = event["is_phishing"]

    model.learn_one(X, y)

    y_predicted = model.predict_one(X)

    # Update accuracy metric
    metric.update(y, y_predicted)

    print(metric)
    MAE.append(metric.get())

    with open('ALMAClassifier.pkl', 'wb') as model_file:
        dill.dump(model, model_file)

    y_true.append(y)
    y_pred.append(y_predicted)

    return event


# Apply the train_and_predict function to each row in the filtered DataFrame
sdf = sdf.apply(train_and_predict)

# Run the streaming application (app automatically tracks the sdf!)
app.run()


# Generate the confusion matrix
cm = confusion_matrix(y_true, y_pred)

# Create a heatmap of the confusion matrix
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=[
            'Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix Heatmap')
plt.show()


plt.plot(MAE)
plt.xlabel('Iterations')
plt.ylabel('MAE')
plt.title('MAE over Training Iterations')
plt.show()
