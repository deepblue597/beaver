# Autogenerated from python.template file

from quixstreams import Application
from quixstreams.models import TopicConfig
import seaborn as sns

from river import metrics , preprocessing
from river import linear_model
import matplotlib.pyplot as plt
from river import ensemble
from river import optim
from sklearn.metrics import confusion_matrix
from river import compose
from river import preprocessing
import json

import dill
import numpy as np 


# Define an application that will connect to Kafka
app = Application(
    broker_address="localhost:39092",  # Kafka broker address
    auto_offset_reset="earliest",
    consumer_group="BayesianLinearRegression",
)

# Define the Kafka topics
input_topic = app.topic("TrumpApproval", value_deserializer="json")

output_topic = app.topic("BayesianLinearRegression-results",
                        value_serializer="json")# Create a Streaming DataFrame connected to the input Kafka topic
sdf = app.dataframe(topic=input_topic)




# Define River Model
model =(
    
    linear_model.BayesianLinearRegression(
    

    ))
    


# Define new features


# Drop features 


# Define metrics
metric = metrics.MAE() +metrics.MSE() 
   
MAE = [] 
MSE = [] 
 






# Variables for plotting

y_true = []
y_pred = []


# Function for training the model
def train_and_predict(X):

    
    y = X["class"]
     
    
    X = {key: value for key, value in X.items() if key != "class"}  
    

    
    model.learn_one(X, y)
     
    
    
    y_predicted = model.predict_one(X)
    
    
    # Update metric
    
    metric.update(y, y_predicted )

    
    print(f"True y: {y}, Predicted: {y_predicted}")
    
    print(metric)
    MAE.append(metric.get()[0])
    MSE.append(metric.get()[1])
     
    
    


    with open('BayesianLinearRegression.pkl', 'wb') as model_file:
        dill.dump(model, model_file)

    
    



    # in some cases model returns one (e.g first learn one iteration in OneVsOneClassifier)
    # so we check if y_pred is not None to add to the lists
    if y_predicted is not None:
        y_true.append(y)
        y_pred.append(y_predicted)
        


    return {
                **X, 
                
                "Prediction": y_predicted,  
                "MAE": metric.get()[0] ,  
                "MSE": metric.get()[1] 
                
            }


# Apply the train_and_predict function to each row in the filtered DataFrame
sdf = sdf.apply(train_and_predict)

# Output topic 
sdf = sdf.to_topic(output_topic)# Run the streaming application (app automatically tracks the sdf!)
app.run()



plt.figure(figsize=(8, 6))
plt.scatter(y_true, y_pred, alpha=0.5)
plt.plot([min(y_true), max(y_true)], [min(y_true), max(y_true)], 'r--')  # Ideal line
plt.xlabel("Real Values class")
plt.ylabel("Predicted Values class ")
plt.title("Real vs Predicted class")
plt.show()




plt.plot(MAE)
plt.xlabel('Iterations')
plt.ylabel('MAE')
plt.title('MAE over Training Iterations')
plt.show()
plt.plot(MSE)
plt.xlabel('Iterations')
plt.ylabel('MSE')
plt.title('MSE over Training Iterations')
plt.show()
 