# Autogenerated from python.template file

from quixstreams import Application
from quixstreams.models import TopicConfig

from river import metrics , preprocessing
from river import {{pipeline.model.type}}
import matplotlib.pyplot as plt
from river import ensemble
from river import optim


import dill


# Define an application that will connect to Kafka
app = Application(
    broker_address="{{pipeline.kafka.broker}}",  # Kafka broker address
    auto_offset_reset="earliest",
    consumer_group="{{pipeline.kafka.consumer_group}}",
)

# Define the Kafka topics
input_topic = app.topic("{{pipeline.kafka.input_topic}}", value_deserializer="json")
output_topic = app.topic("{{pipeline.kafka.output_topic}}",
                        value_serializer="json")

# Create a Streaming DataFrame connected to the input Kafka topic
sdf = app.dataframe(topic=input_topic)

# Define River Model

{%-if pipeline.model.ensemble %}

model = ensemble.{{pipeline.model.ensemble.algorithm}}(
{%-endif%}
model =(
    {%-if pipeline.model.preprocessing %}
    
    preprocessing.{{- pipeline.model.preprocessing }}()|
    {%- endif %}
    {{pipeline.model.type}}.{{pipeline.model.name}}(
    {%-if pipeline.model.optimizer-%}
        optim.{{pipeline.model.optimizer}}()
    {%-endif%}
    {% for param in pipeline.model.params %}
        {{ param.name }} = {{param.value.value}}, 

    {%- endfor %}

    )
)
    {%if pipeline.model.ensemble %}
    ,n_models =  {{pipeline.model.ensemble.num}}, 
    seed= {{pipeline.model.ensemble.seed}}
)
    {%-endif%}



{%for assignment in assignments -%}
# Define new features
{% if assignment == ';' %}
{% elif assignment == '(' or assignment == ')' -%}
    {{ assignment }}
{%- elif assignment is number -%}
    {{ assignment }}
{%- elif assignment in ['+', '-', '*', '/', '='] -%}
    {{ assignment }}
{%- else -%}
    sdf["{{ assignment }}"]
{%- endif %}
{%-endfor%}

# Define metrics
metric = {% for metric in pipeline.metrics.metrics -%}  
metrics.{{metric}}() 
{%- if not loop.last %} + 
{%- endif -%} 
{% endfor %} 
   
{% for metric in pipeline.metrics.metrics -%}  
{{metric}} = [] 
{% endfor %} 


{%if pipeline.target.mappings %}
# Define target mapping
target_mapping = {
    {% for mapping in pipeline.target.mappings -%}
    "{{ mapping.key }}": {{ mapping.value }},
    {% endfor %}
}
{% endif %}


{% if pipeline.plot %}
# Variables for plotting
x_axis = []
y_true = []
y_pred = []
{% endif %}

# Function for training the model
def train_and_predict(event):

    X = { 
        {% for feature in pipeline.features.features -%}
        "{{feature}}": event["{{feature}}"],
        {% endfor %}
        {%-for i in range(1, assignments|length)%}
        {%-if assignments[i] == '='-%}
        "{{assignments[i-1]}}": event["{{assignments[i-1]}}"],
        {%endif-%}
        {%endfor%}
    }

    {% if pipeline.target.mappings %}
    y = target_mapping[event["{{ pipeline.target.name }}"]]
    {% elif pipeline.target %}
    y = event["{{ pipeline.target.name }}"]
    {% endif %} 
    {% if pipeline.target %}
    model.learn_one(X, y)
    {% else %}
    model.learn_one(X)
    {% endif %} 
    
    y_predicted = model.predict_one(X)
    

    # Update accuracy metric
    metric.update(y, y_predicted)
    {% if pipeline.target.mappings %}
    print(f"True Label: {y}, Predicted: {y_predicted}")
    {% endif %}
    print(metric)

    {% for metric in pipeline.metrics.metrics -%}  
    {{metric}}.append(metric.get()[{{loop.index0}}])
    
    {% endfor %} 

    with open('{{pipeline.model.name}}.pkl', 'wb') as model_file:
        dill.dump(model, model_file)

    {% if pipeline.plot %}
    x_axis.append(event["{{pipeline.plot.x_axis}}"])
    y_true.append(y)
    y_pred.append(y_predicted)
    {% endif %}


    return event


# Apply the train_and_predict function to each row in the filtered DataFrame
sdf = sdf.apply(train_and_predict)

# Output topic 
sdf = sdf.to_topic(output_topic)

# Run the streaming application (app automatically tracks the sdf!)
app.run()

{% if pipeline.plot %}
# Plot the data
plt.figure(figsize=(10, 5))
plt.plot(x_axis, y_true, label='y')
plt.plot(x_axis, y_pred, label='Predicted y', linestyle='--')
plt.xlabel("{{pipeline.plot.x_axis}}")
plt.ylabel("{{ pipeline.target.name }}")
plt.title("{{ pipeline.target.name }} over  {{pipeline.plot.x_axis}} ")
plt.legend()
plt.show()
{% endif %}


{% for metric in pipeline.metrics.metrics -%}  
plt.plot({{metric}})
plt.xlabel('Iterations')
plt.ylabel('{{metric}}')
plt.title('{{metric}} over Training Iterations')
plt.show()
{% endfor %} 
