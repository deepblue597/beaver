# Autogenerated from python.template file

from quixstreams import Application
from quixstreams.models import TopicConfig
from river.datasets import synth
from river import evaluate
from river import metrics , preprocessing
from river import tree
import dill

# A minimal application reading temperature data in Celsius from the Kafka topic,
# converting it to Fahrenheit and producing alerts to another topic.

# Define an application that will connect to Kafka
app = Application(
    broker_address="localhost:9092",  # Kafka broker address
    auto_offset_reset="earliest",
    consumer_group="wikipedia-model",
)

# Define the Kafka topics
input_topic = app.topic("wikipedia-events", value_deserializer="json")
output_topic = app.topic("filtered-wikipedia-events",
                        value_serializer="json")
# Create a Streaming DataFrame connected to the input Kafka topic
sdf = app.dataframe(topic=input_topic)


model =(preprocessing.StandardScaler()|tree.HoeffdingTreeClassifier(
    

        grace_period = 100.0, 

    

        delta = 0.1, 

    
)
)

metric = metrics.MAE()

# Define target mapping
target_mapping = {
    
    "bot": 1,
    
    "human": 0,
    
}

def train_and_predict(event):

    X = { 
        
        "domain": event["domain"],
        
        "namespace": event["namespace"],
        
        "title": event["title"],
        
        "comment": event["comment"],
        
        "user_name": event["user_name"],
        
        "new_length": event["new_length"],
        
        "old_length": event["old_length"],
        
        "minor": event["minor"],
        
    }
    y = target_mapping[event["user_type"]]

    model.learn_one(X, y)

    predicted_class = model.predict_one(X)
    

    # Update accuracy metric
    metric.update(y, predicted_class)

    print(f"True Label: {y}, Predicted: {predicted_class}")
    print(f"Current Accuracy: {metric}")

    with open('tree.HoeffdingTreeClassifier.pkl', 'wb') as model_file:
        dill.dump(model, model_file)

    return event


# Apply the train_and_predict function to each row in the filtered DataFrame
sdf = sdf.apply(train_and_predict)


sdf = sdf.to_topic(output_topic)

# Run the streaming application (app automatically tracks the sdf!)
app.run()