
# Autogenerated using jinja files
from quixstreams import Application
from quixstreams.kafka import ConnectionConfig 
from beaver.pipeline import *
from dash import Dash
from dash.dependencies import Input, Output
from dash import dcc, html
import plotly.graph_objs as go
import threading
from plotly.subplots import make_subplots


from river import linear_model
from river import tree
from river import neighbors
from river import compose
from river import preprocessing
from river import metrics




linearReg = linear_model.LinearRegression(
    intercept_lr =0.1
)
hoeffTree = tree.HoeffdingAdaptiveTreeRegressor(
    grace_period =50,
    model_selector_decay =0.3,
    seed =0
)
knnReg = neighbors.KNNRegressor(
)
select = compose.SelectType((int,float)
)
selectstr = compose.SelectType(str
)
encoder = preprocessing.OneHotEncoder(
)
scaler = preprocessing.StandardScaler(
)
mae = metrics.MAE(
)
mse = metrics.MSE(
)
r2 = metrics.R2(
)



#Define connection
connectionConfig = ConnectionConfig(
    bootstrap_servers = 'localhost:39092',
    security_protocol = 'plaintext',
)

#Connection to Kafka
app = Application( 
    broker_address = connectionConfig,
    consumer_group = 'world-happiness',
    auto_offset_reset = 'earliest',
)

#Input topics 

input_topic_World_Happiness_Report = app.topic("World_Happiness_Report", value_deserializer="json")

# Create Streaming DataFrames connected to the input Kafka topics

sdf_World_Happiness_Report = app.dataframe(topic=input_topic_World_Happiness_Report)

#Drop Features

sdf_World_Happiness_Report.drop(["overall_rank"])


#Keep Features




#Connect composers with preprocessors 

preprocessor_World_Happiness_Report =((select|scaler)+(selectstr|encoder))



#Pipeline definition 

linearRegPipeline_pipeline = preprocessor_World_Happiness_Report |linearReg
linearRegPipeline_metrics = [mae,mse,r2]


linearRegPipeline = Pipeline(model = linearRegPipeline_pipeline, model_name ='LinearRegression'  , metrics_list = linearRegPipeline_metrics , name = "linearRegPipeline",y="score",output_topic="linearRegPipeline")

hoeffTreePipeline_pipeline = preprocessor_World_Happiness_Report |hoeffTree
hoeffTreePipeline_metrics = [mae,mse,r2]


hoeffTreePipeline = Pipeline(model = hoeffTreePipeline_pipeline, model_name ='HoeffdingAdaptiveTreeRegressor'  , metrics_list = hoeffTreePipeline_metrics , name = "hoeffTreePipeline",y="score",output_topic="hoeffTreePipeline")

knnRegPipeline_pipeline = preprocessor_World_Happiness_Report |knnReg
knnRegPipeline_metrics = [mae,mse,r2]


knnRegPipeline = Pipeline(model = knnRegPipeline_pipeline, model_name ='KNNRegressor'  , metrics_list = knnRegPipeline_metrics , name = "knnRegPipeline",y="score",output_topic="knnRegPipeline")



# Output topics initialization

output_topic_linearRegPipeline = app.topic(linearRegPipeline.output_topic, value_deserializer="json")

output_topic_hoeffTreePipeline = app.topic(hoeffTreePipeline.output_topic, value_deserializer="json")

output_topic_knnRegPipeline = app.topic(knnRegPipeline.output_topic, value_deserializer="json")



#Sdf for each pipeline 
#Train and predict method calls for each pipeline
#If the pipeline has an output topic then we call it 

sdf_linearRegPipeline = sdf_World_Happiness_Report.apply(linearRegPipeline.train_and_predict).to_topic(output_topic_linearRegPipeline)
sdf_hoeffTreePipeline = sdf_World_Happiness_Report.apply(hoeffTreePipeline.train_and_predict).to_topic(output_topic_hoeffTreePipeline)
sdf_knnRegPipeline = sdf_World_Happiness_Report.apply(knnRegPipeline.train_and_predict).to_topic(output_topic_knnRegPipeline)


# ---------- DASHBOARD SETUP ----------

def run_dash():
    dash_app = Dash(__name__)
    dash_app.layout = html.Div([
         html.H2("Pipelines' Plots" , style={
        'textAlign': 'center',  # Center the text

        'fontFamily': 'sans-serif',  # Change the font family
        'font-weight': 'normal',  # Make the text bold
        }),
        dcc.Interval(id='interval', n_intervals=0),
        dcc.Graph(id='live-graph'), 
        html.Div(
            children=[
                
                dcc.Graph(
                    id='live-stats-linearRegPipeline',
                    #style={'margin': 'auto', 'display': 'block', 'width':'70%'}
                ),
                dcc.Graph(
                    id='live-stats-hoeffTreePipeline',
                    #style={'margin': 'auto', 'display': 'block', 'width':'70%'}
                ),
                dcc.Graph(
                    id='live-stats-knnRegPipeline',
                    #style={'margin': 'auto', 'display': 'block', 'width':'70%'}
                )
            ]
        )
    ])

    @dash_app.callback(
        Output('live-graph', 'figure'),
        Input('interval', 'n_intervals')
    )
    def update_graph(n):
        fig = make_subplots(rows=3, cols=1 , vertical_spacing=0.1)

        
        linearRegPipeline.add_metrics_traces(fig = fig , row = 1, col = 1 ) 
        
        hoeffTreePipeline.add_metrics_traces(fig = fig , row = 2, col = 1 ) 
        
        knnRegPipeline.add_metrics_traces(fig = fig , row = 3, col = 1 ) 
        

        fig.update_layout(height=600, title="Live Metrics", margin=dict(t=40, b=40), showlegend=True )
        return fig


    
    @dash_app.callback(
        Output(
            component_id='live-stats-linearRegPipeline', 
            component_property='figure'
        ), 
        Input(
            component_id='interval', 
            component_property='n_intervals'
        )
    )

      
    def update_stats_linearRegPipeline(n):
        
        traces = []  
        
        linearRegPipeline.add_stats_traces(traces) 
              

        
        if traces:
            fig = go.Figure(
                    data=traces, 
                    layout= go.Layout(
                        title='linearRegPipeline Statistics'
                    )
            )
            return fig    
    
        return go.Figure()
    
    @dash_app.callback(
        Output(
            component_id='live-stats-hoeffTreePipeline', 
            component_property='figure'
        ), 
        Input(
            component_id='interval', 
            component_property='n_intervals'
        )
    )

      
    def update_stats_hoeffTreePipeline(n):
        
        traces = []  
        
        hoeffTreePipeline.add_stats_traces(traces) 
              

        
        if traces:
            fig = go.Figure(
                    data=traces, 
                    layout= go.Layout(
                        title='hoeffTreePipeline Statistics'
                    )
            )
            return fig    
    
        return go.Figure()
    
    @dash_app.callback(
        Output(
            component_id='live-stats-knnRegPipeline', 
            component_property='figure'
        ), 
        Input(
            component_id='interval', 
            component_property='n_intervals'
        )
    )

      
    def update_stats_knnRegPipeline(n):
        
        traces = []  
        
        knnRegPipeline.add_stats_traces(traces) 
              

        
        if traces:
            fig = go.Figure(
                    data=traces, 
                    layout= go.Layout(
                        title='knnRegPipeline Statistics'
                    )
            )
            return fig    
    
        return go.Figure()
    
    dash_app.run(debug=False, use_reloader=False)

if __name__ == '__main__':
    #Run Plotly on different thread
    threading.Thread(target=run_dash, daemon=True).start()
   
    # Run Quix Streams 
    app.run()