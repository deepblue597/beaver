import models

List:
    '[' items*=ParamValue[','] ']'
;

Tuple:
    '(' items*=ParamValue[','] ')'
;


Dict:
    '{' items*=DictItem[','] '}'
;

DictItem:
    name=STRING ':' value=ParamValue
;

ModelRef : value = [Model];

TypeRef : value = ID;

Param:
    (name = ID '=')? value = ParamValue;

ParamValue:
    TypeRef | NUMBER | STRING | BOOL  | Tuple | List | Dict | ModelRef;


// Special rule for comments. Comments start with //
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;

Model : Composer | 
        Preprocessor | 
        Feature | 
        Algorithm | 
        Optimizer | 
        Metric |
        Stat
; 

DataModel : Composer | 
            Preprocessor | 
            Feature ; 


Stat:
    'stat' '<' type = StatsGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
; 

Feature:
    'feature' '<' type = FeatureGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;



Composer:
    'composer' '<' type = ComposeGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;

Preprocessor:
    'preprocessor' '<' type = PreprocGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;


Algorithm:
    'algorithm' '<' type = AlgoGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;

Optimizer:
    'optimizer' '<' type = OptimGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;

Metric:
    'metric' '<' type = MetricGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;


