# Autogenerated from python.template file

from quixstreams import Application
from quixstreams.models import TopicConfig
from quixstreams.kafka import ConnectionConfig 
from pipeline import * 







from river import metrics



from river import time_series











#Define metrics
mae = metrics.MAE()


#Define live data algorithms
HoltWinters = time_series.HoltWinters(
    alpha =0.3,
    beta =0.1,
    gamma =0.6,
    seasonality =12,
    multiplicative =True)


#Connection Configuration for quixstreams
connectionConfig = ConnectionConfig( 
    
    bootstrap_servers ="localhost:39092",
    security_protocol ="plaintext")

#Connection to Kafka 
app = Application( 
    broker_address = connectionConfig,
    consumer_group ="time_series",
    auto_offset_reset ="earliest")

#Input topics 

input_topic_airline = app.topic("airline", value_deserializer="json")

# Create Streaming DataFrames connected to the input Kafka topics

sdf_airline = app.dataframe(topic=input_topic_airline)


# Define new features



#Connect composers with preprocessors 



#Pipeline definition 

HoltWintersPipe_pipeline =HoltWinters
HoltWintersPipe_metrics = [mae]


HoltWintersPipe = Pipeline(model = HoltWintersPipe_pipeline , metrics_list = HoltWintersPipe_metrics , name = "HoltWintersPipe",y="passengers",output_topic="HoltWintersBVR")

# Output topics initialization

output_topic_HoltWintersPipe = app.topic(HoltWintersPipe.output_topic, value_deserializer="json")


#Sdf for each pipeline 
#Train and predict method calls for each pipeline
#If the pipeline has an output topic then we call it 

sdf_HoltWintersPipe = sdf_airline.apply(HoltWintersPipe.train_and_predict).to_topic(output_topic_HoltWintersPipe)


# Run Quix Streams 
app.run()

#Metric plots for each Pipeline

HoltWintersPipe.metrics_plot()

