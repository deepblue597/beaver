# Autogenerated from python.template file

from quixstreams import Application
from quixstreams.models import TopicConfig
from quixstreams.kafka import ConnectionConfig 


{%if file.preprocessors -%}
from river import preprocessing
{%- endif %}

{%if file.composers -%}
from river import compose
{%- endif %}

{%if file.optimizers -%}
from river import optim
{%- endif %}

from river import metrics

{%for model in file.algorithms.models-%}
from river import {{model.type}}
{%endfor%}


{%if file.optimizers -%}
#Define optimizers
{%for model in file.optimizers[0].models-%}
{{model.name}} = {{model.type}}.{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}
{%- endif %}


{%if file.preprocessors -%}
#Define preprocessors
{%for model in file.preprocessors[0].models-%}
{{model.name}} = {{model.type}}.{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}
{%- endif %}


{%if file.composers -%}
#Define composers
{%for model in file.composers[0].models-%}
{{model.name}} = {{model.type}}.{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%-elif param.value.itemsT -%}
    (
        {%-for param in param.value.itemsT-%}
        {{param}}{%- if not loop.last %},{%- endif -%} 
        {%-endfor-%}
    )
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}
{%- endif %}


#Define metrics
{%for model in file.metrics.models-%}
{{model.name}} = {{model.type}}.{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%}
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}

#Define live data algorithms
{%for model in file.algorithms.models-%}
{{model.name}} = {{model.type}}.{%-if model.subtype-%}{{model.subtype}}.{%-endif-%}
{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}

#Connection Configuration for quixstreams
connectionConfig = ConnectionConfig( 
    {% for param in file.connector.connection_params%}
    {{param.name}} = {%- if param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}

)

#Connection to Kafka 
app = Application( 
    broker_address = connectionConfig, 
    {%-for param in file.connector.kafka_params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)

#Input topics 
{%for data in file.data%}
input_topic_{{data.name}} = app.topic("{{data.input_topic}}", value_deserializer="json")
{%- endfor %}

# Create Streaming DataFrames connected to the input Kafka topics
{%for data in file.data%}
sdf_{{data.name}} = app.dataframe(topic=input_topic_{{data.name}})
{%- endfor %}

#FIXME: The below code creates new features in a generic sdf which we might not want 
# See how to fix that 
# Define new features
{%for assignment in assignments -%}

{% if assignment == ';' %}
{% elif assignment == '(' or assignment == ')' -%}
    {{ assignment }}
{%- elif assignment is number -%}
    {{ assignment }}
{%- elif assignment in ['+', '-', '*', '/', '='] -%}
    {{ assignment }}
{%- else -%}
    sdf["{{ assignment }}"]
{%- endif %}
{%-endfor%}

