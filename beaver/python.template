# Autogenerated from python.template file

from quixstreams import Application
from quixstreams.models import TopicConfig
from quixstreams.kafka import ConnectionConfig 
from pipeline import * 

{%if file.preprocessors -%}
from river import preprocessing
{%- endif %}

{%if file.composers -%}
from river import compose
{%- endif %}

{%if file.optimizers -%}
from river import optim
{%- endif %}

from river import metrics

{%for model in file.algorithms.models-%}
from river import {{model.type}}
{%endfor%}


{%if file.optimizers -%}
#Define optimizers
{%for model in file.optimizers[0].models-%}
{{model.name}} = {{model.type}}.{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}
{%- endif %}


{%if file.preprocessors -%}
#Define preprocessors
{%for model in file.preprocessors[0].models-%}
{{model.name}} = {{model.type}}.{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}
{%- endif %}


{%if file.composers -%}
#Define composers
{%for model in file.composers[0].models-%}
{{model.name}} = {{model.type}}.{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%-elif param.value.itemsT -%}
    (
        {%-for param in param.value.itemsT-%}
        {{param}}{%- if not loop.last %},{%- endif -%} 
        {%-endfor-%}
    )
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}
{%- endif %}


#Define metrics
{%for model in file.metrics.models-%}
{{model.name}} = {{model.type}}.{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%}
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}

#Define live data algorithms
{%for model in file.algorithms.models-%}
{{model.name}} = {{model.type}}.{%-if model.subtype-%}{{model.subtype}}.{%-endif-%}
{{model.nameR}}(
    {%-for param in model.params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)
{%endfor%}

#Connection Configuration for quixstreams
connectionConfig = ConnectionConfig( 
    {% for param in file.connector.connection_params%}
    {{param.name}} = {%- if param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}

)

#Connection to Kafka 
app = Application( 
    broker_address = connectionConfig, 
    {%-for param in file.connector.kafka_params%}
    {{param.name}} =  
    {%-if param.value.value-%}
    {{param.value.value.name}}
    {%-elif param.value.items -%}
    {{param.value.items}}
    {%-elif param.value.itemsD -%}
    {
    {%-for param in param.value.itemsD-%}
    "{{param.name}}" : {{param.value}}{%- if not loop.last %},{%- endif -%} 
    {%-endfor-%}
    }
    {%- elif param.value is string -%}
    "{{param.value}}"
    {%-else-%}
    {{param.value}}
    {%-endif%}{%- if not loop.last %},{%- endif -%} 
    {%- endfor -%}
)

#Input topics 
{%for data in file.data%}
input_topic_{{data.name}} = app.topic("{{data.input_topic}}", value_deserializer="json")
{%- endfor %}

# Create Streaming DataFrames connected to the input Kafka topics
{%for data in file.data%}
sdf_{{data.name}} = app.dataframe(topic=input_topic_{{data.name}})
{%- endfor %}

{% if assignments%}
# Define new features
{%for key, values in assignments.items() -%}
{%for assignment in values-%}

{% if assignment == ';' %}
{% elif assignment == '(' or assignment == ')' -%}
    {{ assignment }}
{%- elif assignment is number -%}
    {{ assignment }}
{%- elif assignment in ['+', '-', '*', '/', '='] -%}
    {{ assignment }}
{%- else -%}
    sdf_{{key}}["{{ assignment }}"]
{%- endif %}
{%-endfor%}
{%-endfor%}
{%endif%}
{%if file.data.features%}
#Drop Features
{%for data in file.data%}
{%-if data.features.drop_features%}
sdf_{{data.name}}.drop([
    {%- for feature  in data.features.drop_features -%}
    "{{feature}}"
    {%- if not loop.last %},
    {%- endif -%} 
    {%- endfor -%}
])
{%endif-%}
{%- endfor %}

#Keep Features
{%for data in file.data[0]%}
{%-if data.features.keep_features%}
sdf_{{data.name}} = sdf_{{data.name}}[[
    {%- for feature  in data.features.keep_features -%}
    "{{feature}}"
    {%- if not loop.last %},
    {%- endif -%} 
    {%- endfor -%}
]]
{%endif-%}
{%- endfor %}
{%endif%}
#Connect composers with preprocessors 
{%for data in file.data-%}
preprocessor_{{data.name}} = 
{%-for preprocessors in data.preprocessors-%}
{%-for model in preprocessors.items-%}
{{model.value.name}}{%- if not loop.last %}|{%- endif -%}
{%-endfor%}
{%- if not loop.last %}+{%- endif -%}
{%-endfor%}
{%endfor%}

#Pipeline definition 

{%for pipeline in file.pipelines -%}

{{pipeline.name}}_pipeline = preprocessor_{{pipeline.data.name}} | {{pipeline.algorithm.name}}

{{pipeline.name}}_metrics = [
    {%-for metric in pipeline.metrics-%}
    {{metric.name}}{%- if not loop.last %},{%- endif -%}
    
    {%-endfor-%}
]
{{pipeline.name}} = Pipeline(model = {{pipeline.name}}_pipeline , metrics_list = {{pipeline.name}}_metrics , name = "{{pipeline.name}}"{%-if pipeline.output_topic-%},output_topic="{{pipeline.output_topic}}"{%-endif-%} )

{% endfor -%}

# Output topics initialization
{%for pipeline in file.pipelines -%}
{%-if pipeline.output_topic%}
output_topic_{{pipeline.name}} = app.topic({{pipeline.name}}.output_topic, value_deserializer="json")
{%endif-%}

{% endfor %}

#Sdf for each pipeline 
#Train and predict method calls for each pipeline
#If the pipeline has an output topic then we call it 

{%for pipeline in file.pipelines -%}

sdf_{{pipeline.name}} = sdf_{{pipeline.data.name}}.apply({{pipeline.name}}.train_and_predict)
{%-if pipeline.output_topic-%}
.to_topic(output_topic_{{pipeline.name}})
{%endif-%}

{% endfor %}

# Run Quix Streams 
app.run()

#Metric plots for each Pipeline
{%for pipeline in file.pipelines -%}
{{pipeline.name}}.metrics_plot()

{% endfor %}