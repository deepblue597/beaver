import models

//TODO: fix items 
List:
    '[' items*=ParamValue[','] ']'
;

//ListItem:
//    NUMBER | STRING | BOOL | List | Dict | ModelRef 
//;



Tuple:
    '(' items*=ParamValue[','] ')'
;

//TupleType:
//    NUMBER | STRING | BOOL | Tuple |Dict | List | ID
//;


Dict:
    '{' items*=DictItem[','] '}'
;

DictItem:
    name=STRING ':' value=ParamValue
;

//DictType:
//    NUMBER | STRING | BOOL | Dict | List | ID
//;




ModelRef : value = [Model];

Param:
    name = ID '=' value = ParamValue;

ParamValue:
    NUMBER | STRING | BOOL  | Tuple | List | Dict | ModelRef;


// Special rule for comments. Comments start with //
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;

Model : Composer | Preprocessor | Algorithm | Optimizer | Metric ; 
DataModel : Composer | Preprocessor ; 

Composer:
    'composer' '<' type = ComposeGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;

Preprocessor:
    'preprocessor' '<' type = PreprocGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;


Algorithm:
    'algorithm' '<' type = AlgoGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;

Optimizer:
    'optimizer' '<' type = OptimGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;

Metric:
    'metric' '<' type = MetricGroup '>'  name=ID 
    ('params' ':'
        params += Param[',']
    )?     
;


