{% import '/templates/models_macros.jinja' as models_macros %}
# Autogenerated using jinja files
from quixstreams import Application
from quixstreams.kafka import ConnectionConfig 
{%- set custom_import_map = {
    'neuralNetworksActivations': 'neural_net',
    'multioutputMetrics': 'metrics',
    'optimizersBase': 'optim',
    'optimInitializers': 'optim',
    'optimLosses': 'optim',
    'optimSchedulers': 'optim',
    'probaBase': 'proba',
    'recoBase': 'reco',
    'treeBase': 'treeBase',
    'treeSplitter': 'tree'
} %}

{%- set custom_model_init = {
    'neuralNetworksActivations': 'neural_net.activations',
    'multioutputMetrics': 'metrics.multioutput',
    'optimizersBase': 'optim.base',
    'optimInitializers': 'optim.initializers',
    'optimLosses': 'optim.losses',
    'optimSchedulers': 'optim.schedulers',
    'probaBase': 'proba.base',
    'recoBase': 'reco.base',
    'treeBase': 'tree.base',
    'treeSplitter': 'tree.splitter'
} %}

{%-if file.composers%}
{{models_macros.generate_imports(file.composers.models ,custom_import_map )}}
{%-endif%}

{%-if file.preprocessors%}
{{models_macros.generate_imports(file.preprocessors.models ,custom_import_map )}}
{%-endif%}

{%-if file.optimizers%}
{{models_macros.generate_imports(file.optimizers.models ,custom_import_map )}}
{%-endif%}

{{models_macros.generate_imports(file.algorithms.models ,custom_import_map )}}

{%-if file.metrics%}
{{models_macros.generate_imports(file.metrics.models ,custom_import_map )}}
{%-endif%}

#Define models
{%-if file.composers%}
{{models_macros.generate_model_classes(file.composers.models ,custom_import_map , custom_model_init)}}
{%-endif%}

{%-if file.preprocessors%}
{{models_macros.generate_model_classes(file.preprocessors.models ,custom_import_map, custom_model_init )}}
{%-endif%}

{%-if file.optimizers%}
{{models_macros.generate_model_classes(file.optimizers.models ,custom_import_map , custom_model_init)}}
{%-endif%}

{{models_macros.generate_model_classes(file.algorithms.models ,custom_import_map, custom_model_init )}}

{%-if file.metrics%}
{{models_macros.generate_model_classes(file.metrics.models ,custom_import_map, custom_model_init)}}
{%-endif%}

#Define connection
connectionConfig = ConnectionConfig( 
{%- for param_name, param_value in [
    ('bootstrap_servers', file.connector.bootstrap_servers),
    ('security_protocol', file.connector.security_protocol),
    ('sasl_username', file.connector.sasl_username),
    ('sasl_password', file.connector.sasl_password)
    ] -%}
    {%- if param_value  %}
    {%-if param_value is string%}
    {{ param_name }} = '{{ param_value }}'{%- if not loop.last -%},{%- endif -%}
    {%-else%}
    {{ param_name }} = {{ param_value }}{%- if not loop.last -%},{%- endif -%}
    {%-endif%}
        
    {%- endif %}
{%- endfor %}
)

#Connection to Kafka
app = Application( 
    broker_address = connectionConfig,
{%- for param_name, param_value in [
    ('quix_sdk_token', file.connector.quix_sdk_token),
    ('consumer_group', file.connector.consumer_group),
    ('auto_offset_reset', file.connector.auto_offset_reset),
    ('commit_interval', file.connector.commit_interval),
    ('commit_every', file.connector.commit_every),
    ('consumer_poll_timeout', file.connector.consumer_poll_timeout),
    ('producer_poll_timeout', file.connector.producer_poll_timeout),
    ('loglevel', file.connector.loglevel),
    ('auto_create_topics', file.connector.auto_create_topics),
    ('use_changelog_topics', file.connector.use_changelog_topics),
    ('quix_config_builder', file.connector.quix_config_builder),
    ('topic_manager', file.connector.topic_manager),
    ('request_timeout', file.connector.request_timeout),
    ('topic_create_timeout', file.connector.topic_create_timeout),
    ('processing_guarantee', file.connector.processing_guarantee)
] -%}
    {%- if param_value  %}
    {%-if param_value is string%}
    {{ param_name }} = '{{ param_value }}'{%- if not loop.last -%},{%- endif -%}
    {%-else%}
    {{ param_name }} = {{ param_value }}{%- if not loop.last -%},{%- endif -%}
    {%-endif%}
        
    {%- endif %}
{%- endfor %}
)

#Input topics 
{%for data in file.data%}
input_topic_{{data.name}} = app.topic("{{data.input_topic}}", value_deserializer="json")
{%- endfor %}

# Create Streaming DataFrames connected to the input Kafka topics
{%for data in file.data%}
sdf_{{data.name}} = app.dataframe(topic=input_topic_{{data.name}})
{%- endfor %}


#Drop Features
{%for data in file.data%}
{%-if data.features.drop_features%}
sdf_{{data.name}}.drop([
    {%- for feature  in data.features.drop_features -%}
    "{{feature}}"
    {%- if not loop.last %},
    {%- endif -%} 
    {%- endfor -%}
])
{%endif-%}
{%- endfor %}

#Keep Features
{%for data in file.data%}
{%-if data.features.keep_features%}
sdf_{{data.name}} = sdf_{{data.name}}[[
    {%- for feature  in data.features.keep_features -%}
    "{{feature}}"
    {%- if not loop.last %},
    {%- endif -%} 
    {%- endfor -%}
]]
{%endif-%}
{%- endfor %}

#TODO: Assignments 

#Connect composers with preprocessors 
{%for data in file.data-%}
{%if data.preprocessors%}
preprocessor_{{data.name}} = 
{%-for preprocessors in data.preprocessors-%}
{%-for model in preprocessors.items-%}
{{model.name}}{%- if not loop.last %}|{%- endif -%}
{%-endfor%}
{%- if not loop.last %}+{%- endif -%}
{%-endfor%}
{%endif%}
{%endfor%}
