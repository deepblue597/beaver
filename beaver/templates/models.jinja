{% import 'beaver/templates/models_macros.jinja' as models_macros %}
# Autogenerated using jinja files
from quixstreams import Application
from quixstreams.kafka import ConnectionConfig 
from beaver.pipeline import Pipeline
from dash import Dash
from dash.dependencies import Input, Output
from dash import dcc, html
import plotly.graph_objs as go
import threading
from plotly.subplots import make_subplots
{%- set custom_import_map = {
    'neuralNetworksActivations': 'neural_net',
    'multioutputMetrics': 'metrics',
    'optimizersBase': 'optim',
    'optimInitializers': 'optim',
    'optimLosses': 'optim',
    'optimSchedulers': 'optim',
    'probaBase': 'proba',
    'recoBase': 'reco',
    'treeBase': 'treeBase',
    'treeSplitter': 'tree',
    'driftBinary': 'drift'
} %}
{%- set custom_model_init = {
    'neuralNetworksActivations': 'neural_net.activations',
    'multioutputMetrics': 'metrics.multioutput',
    'optimizersBase': 'optim.base',
    'optimInitializers': 'optim.initializers',
    'optimLosses': 'optim.losses',
    'optimSchedulers': 'optim.schedulers',
    'probaBase': 'proba.base',
    'recoBase': 'reco.base',
    'treeBase': 'tree.base',
    'treeSplitter': 'tree.splitter',
    'driftBinary' : 'drift.binary'
} %}

{{models_macros.generate_imports(file.models ,custom_import_map )}}

{{models_macros.generate_model_classes(file.models ,custom_import_map, custom_model_init )}}

{% include 'beaver/templates/quixstreams.jinja' %}

{% include 'beaver/templates/features.jinja' %}

#Connect composers with preprocessors 
{%for data in file.data-%}
{%if data.preprocessors%}
preprocessor_{{data.name}} = 
{%-for preprocessors in data.preprocessors-%}{%- if loop.first %}({%- endif -%}
{%-for model in preprocessors.items-%}{%- if loop.first %}({%- endif -%}
{{model.name}}{%- if not loop.last %}|{%-else-%}){%- endif -%}
{%-endfor%}
{%- if not loop.last %}+{%-else-%}){%- endif -%}
{%-endfor%}
{%endif%}
{%endfor%}

{% include 'beaver/templates/pipeline.jinja' %}

# Output topics initialization
{%for pipeline in file.pipelines -%}
{%-if pipeline.output_topic%}
output_topic_{{pipeline.name}} = app.topic({{pipeline.name}}.output_topic, value_deserializer="json")
{%endif-%}

{% endfor %}


#Sdf for each pipeline 
#Train and predict method calls for each pipeline
#If the pipeline has an output topic then we call it 

{%for pipeline in file.pipelines -%}

sdf_{{pipeline.name}} = sdf_{{pipeline.data.name}}.apply({{pipeline.name}}.train_and_predict)
{%-if pipeline.output_topic-%}
.to_topic(output_topic_{{pipeline.name}})
{%endif-%}

{% endfor %}

{% include 'beaver/templates/dash.jinja' %}

if __name__ == '__main__':
    #Run Plotly on different thread
    threading.Thread(target=run_dash, daemon=True).start()
   
    # Run Quix Streams 
    app.run()
