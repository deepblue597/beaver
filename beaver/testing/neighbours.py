# Autogenerated from python.template file

from quixstreams import Application
from quixstreams.models import TopicConfig
from quixstreams.kafka import ConnectionConfig 
from pipeline import * 

from river import preprocessing





from river import metrics



from river import neighbors






#Define preprocessors
standardScaler = preprocessing.StandardScaler()





#Define metrics
accuracy = metrics.Accuracy()
mae = metrics.MAE()
rmse = metrics.RMSE()


#Define live data algorithms
SWINN = neighbors.SWINN(
    seed =42)
KNNClassifier = neighbors.KNNClassifier(
    engine =SWINN)
KNNRegressor = neighbors.KNNRegressor()


#Connection Configuration for quixstreams
connectionConfig = ConnectionConfig( 
    
    bootstrap_servers ="localhost:39092",
    security_protocol ="plaintext")

#Connection to Kafka 
app = Application( 
    broker_address = connectionConfig,
    consumer_group ="neighboursRegs",
    auto_offset_reset ="earliest")

#Input topics 

input_topic_TrumpApproval = app.topic("TrumpApproval", value_deserializer="json")
input_topic_Phishing = app.topic("Phishing", value_deserializer="json")

# Create Streaming DataFrames connected to the input Kafka topics

sdf_TrumpApproval = app.dataframe(topic=input_topic_TrumpApproval)
sdf_Phishing = app.dataframe(topic=input_topic_Phishing)


# Define new features



#Connect composers with preprocessors 


preprocessor_Phishing =standardScaler



#Pipeline definition 

KNNRegressorPipe_pipeline =KNNRegressor
KNNRegressorPipe_metrics = [rmse]
KNNRegressorPipe = Pipeline(model = KNNRegressorPipe_pipeline , metrics_list = KNNRegressorPipe_metrics , name = "KNNRegressorPipe",y="five_thirty_eight",output_topic="KNNRegressorBVR")

KNNClassifierPipe_pipeline = preprocessor_Phishing |KNNClassifier
KNNClassifierPipe_metrics = [accuracy]
KNNClassifierPipe = Pipeline(model = KNNClassifierPipe_pipeline , metrics_list = KNNClassifierPipe_metrics , name = "KNNClassifierPipe",y="class",output_topic="KNNClassifierBVR")

# Output topics initialization

output_topic_KNNRegressorPipe = app.topic(KNNRegressorPipe.output_topic, value_deserializer="json")

output_topic_KNNClassifierPipe = app.topic(KNNClassifierPipe.output_topic, value_deserializer="json")


#Sdf for each pipeline 
#Train and predict method calls for each pipeline
#If the pipeline has an output topic then we call it 

sdf_KNNRegressorPipe = sdf_TrumpApproval.apply(KNNRegressorPipe.train_and_predict).to_topic(output_topic_KNNRegressorPipe)
sdf_KNNClassifierPipe = sdf_Phishing.apply(KNNClassifierPipe.train_and_predict).to_topic(output_topic_KNNClassifierPipe)


# Run Quix Streams 
app.run()

#Metric plots for each Pipeline
KNNRegressorPipe.metrics_plot()

KNNClassifierPipe.metrics_plot()

