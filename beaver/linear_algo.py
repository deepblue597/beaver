# Autogenerated from python.template file
# %%
from quixstreams import Application
from quixstreams.models import TopicConfig
from quixstreams.kafka import ConnectionConfig
from pipeline import *

from river import preprocessing


from river import metrics

from river import linear_model


# %%


# Define preprocessors
standardScaler = preprocessing.StandardScaler()


# Define metrics
accuracy = metrics.Accuracy()


# Define live data algorithms
alma = linear_model.ALMAClassifier()


# Connection Configuration for quixstreams
connectionConfig = ConnectionConfig(

    bootstrap_servers="localhost:39092",
    security_protocol="plaintext")
# %%
# Connection to Kafka
app = Application(
    broker_address=connectionConfig,
    consumer_group="test_consoumers")

# %%
# Input topics

input_topic_phising = app.topic("Phishing", value_deserializer="json")

# Create Streaming DataFrames connected to the input Kafka topics

sdf_phising = app.dataframe(topic=input_topic_phising)


# Connect composers with preprocessors
preprocessor_phising = standardScaler


# Pipeline definition

linear_algorithm_pipeline = preprocessor_phising | alma

linear_algorithm_metrics = [accuracy]
# %%
linear_algorithm = Pipeline(model=linear_algorithm_pipeline, metrics_list=linear_algorithm_metrics,
                            name="linear_algorithm", output_topic="ALMAClassifierBVR")

# Output topics initialization

output_topic_linear_algorithm = app.topic(
    linear_algorithm.output_topic, value_deserializer="json")


# Sdf for each pipeline
# Train and predict method calls for each pipeline
# If the pipeline has an output topic then we call it
# %%
sdf_linear_algorithm = sdf_phising.apply(
    linear_algorithm.train_and_predict).to_topic(output_topic_linear_algorithm)


# Run Quix Streams
app.run()

# Metric plots for each Pipeline
linear_algorithm.metrics_plot()


# %%
